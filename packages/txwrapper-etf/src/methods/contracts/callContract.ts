// src/methods/contracts/call.ts
import {
    BaseTxInfo,
    defineMethod,
    OptionsWithMeta,
    UnsignedTransaction,
  } from '@substrate/txwrapper-core';
  
  // We take care to build an explicit interface with docstrings that will make it easy for users to
  // understand the arguments they need to provide (docstrings also play nice with IDEs).
  //
  // For choosing what type to give each argument it is very helpful to look at the auto-generated
  // typing that polkadot-js typegen creates for each method. In this case, we can refer to the types generated
  // for Acala since the runtime uses the ORML currencies pallets. We find the definitions here:
  // https://github.com/AcalaNetwork/acala.js/blob/4fe5881058003fdb5bc9e3b0c505f3846426db96/packages/types/src/interfaces/augment-api-tx.ts#L213
  //
  // Note: An `augment-api-tx.ts` file (where we find this definitions) is generated by polkadot-js typegen: 
  // https://polkadot.js.org/docs/api/examples/promise/typegen/
  export type ContractCallArgs = {
    /**
     * Address of the contract to call.
     */
    dest: string;
    /**
     * The balance to transfer from the `origin` to `dest`.
     */
    value: number;
    /**
     * The gas limit enforced when executing the constructor.
     */
    gas_limit: number;
    /**
     * The maximum amount of balance that can be charged from the
	  * caller to pay for the storage consumed.
     */
    storage_deposit_limit: number;
    /**
     * The input data to pass to the contract.
     */
    data: string;
  }
  
  // Define the method
  export function transfer(
    args: ContractCallArgs,
    info: BaseTxInfo,
    options: OptionsWithMeta
  ): UnsignedTransaction {
    return defineMethod(
      {
        method: {
          args,
          name: 'call',
          pallet: 'contract',
        },
        ...info,
      },
      options
    );
  }